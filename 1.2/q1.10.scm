(define (A x y)
  (cond ((= y 0) 0)
		((= x 0) (* 2 y))
		((= y 1) 2)
		(else (A (- x 1)
				 (A x (- y 1))))))

;; https://ja.wikipedia.org/wiki/アッカーマン関数


(print (A 1 10))
;; 1024

(print (A 2 4))
;; 65536

(print (A 3 3))
;; 65536


(define (f n) (A 0 n))
;; (* 2 n)
;; 2n
(print "(f 0) => " (f 0))
(print "(f 1) => " (f 1))
(print "(f 2) => " (f 2))
(print "(f 3) => " (f 3))
(print "(f 4) => " (f 4))

(define (g n) (A 1 n))
;; (A 0 (A 1 (- n 1)))
;; (A 0 (A 1 (- n 1)))             ... (* 2 (A 1 (- n 1)))
;; (A 0 (A 0 (A 1 (- n 2))))       ... (* 2 (* 2 (A 1 (- n 2))))
;; (A 0 (A 0 (A 0 (A 1 (- n 3))))) ... (* 2 (* 2 (* 2 (A 1 (- n 3)))))
;; (A 0 (A 0 (A 0 ... (A 1 1)))))  ... (* 2 (* 2 (* 2 ... (* 2 2))))
;; g(n) = 2^n
;; g(0) = 0 
(print "(g 0) => " (g 0))
(print "(g 1) => " (g 1))
(print "(g 2) => " (g 2))
(print "(g 3) => " (g 3))
(print "(g 4) => " (g 4))

(define (h n) (A 2 n))
;; (A 1 (A 2 (- n 1)))             ... 2^(A 2 (- n 1))
;; (A 1 (A 1 (A 2 (- n 2))))       ... 2^2^(A 2 (- n 2))
;; (A 1 (A 1 (A 1 (A 2 (- n 3))))) ... 2^2^2^(A 2 (- n 3))
;; (A 1 (A 1 (A 1 ... (A 2 1))))   ... 2^2^2^...^2
;;
;; h(n) = 2^h(n-1) ... n > 1 の時
;; h(1) = 2
;; h(0) = 0

(print "(h 0) => " (h 0))    ;; 0
(print "(h 1) => " (h 1))    ;; 2
(print "(h 2) => " (h 2))    ;; 2^2
(print "(h 3) => " (h 3))    ;; 2^4
(print "(h 4) => " (h 4))    ;; 2^16

(define (k n) (* 5 n n))
